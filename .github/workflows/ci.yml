name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build-test-deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout do código
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. Ativar Conda (login shell)
      - name: Activate Conda environment
        shell: bash -l {0}
        run: |
          source "${HOME}/miniconda3/etc/profile.d/conda.sh"
          conda activate ogum

      # 3. Cache dos pacotes Conda
      - name: Cache conda env
        uses: actions/cache@v4
        with:
          path: ~/conda_pkgs_dir
          key: ${{ runner.os }}-conda-${{ hashFiles('environment.yml') }}
          restore-keys: |
            ${{ runner.os }}-conda-

      # 4. Criação do ambiente via mamba
      - name: Set up Conda (mamba)
        uses: conda-incubator/setup-miniconda@v3
        with:
          environment-file: environment.yml
          activate-environment: ogum
          use-mamba: true
          auto-update-conda: true
          miniforge-variant: Miniforge3
          python-version: 3.11

      # 5. Instalar o pacote em modo editable
      - name: Install package
        shell: bash -l {0}
        run: pip install -e .

      # 6. Instalar dependências de desenvolvimento
      - name: Install dev dependencies
        shell: bash -l {0}
        run: pip install -r requirements-dev.txt

      # 7. Lint com Ruff
      - name: Lint (ruff)
        shell: bash -l {0}
        run: |
          ruff check --exit-zero src
          ruff format --check src || true

      # 8. Testes + cobertura
      - name: Run tests
        shell: bash -l {0}
        run: pytest --cov=ogum --cov-report=xml

      # 9. Envio da cobertura ao Codecov
      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          files: coverage.xml

      # 10. Autenticar ao GCP via Workload Identity
      - name: Authenticate to GCP
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_CREDENTIALS }}

      # 11. Configuração do SDK do GCP
      - name: Set up GCP SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id:         ${{ secrets.GCP_PROJECT_ID }}
          export_default_credentials: true

      # 12. Autenticar Docker no Artifact Registry
      - name: Configure Docker for Artifact Registry
        run: |
          gcloud auth configure-docker southamerica-east1-docker.pkg.dev --quiet

      # 13. Build & Push da imagem Docker
      - name: Build & Push Docker image
        shell: bash -l {0}
        run: |
          docker build \
            -t southamerica-east1-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/ogum/ogumsoftware:latest \
            .
          docker push southamerica-east1-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/ogum/ogumsoftware:latest
